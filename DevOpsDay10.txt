

Multistage Build of Image in Docker

Dockerfile
FROM ubuntu:24.04 as build
ARG DEBIAN_FRONTEND=noninteractive
RUN apt-get update
RUN apt-get install -y openjdk-11-jdk
RUN apt-get install -y git 
RUN apt-get install -y maven
ARG REPO
ARG PATH /opt/app
COPY <<EOF ./script.sh
#!/bin/bash
git clone $REPO $PATH
cd $PATH
mvn clean package
EOF
RUN sh script.sh

FROM kulbhushanmayer/tomcat:10.1.19 
COPY --from=build $PATH/target/*.war /opt/app/tomcat/webapps/

docker image build . -f Dockerfile -t app:1.0 --build-arg REPO=https://github.com/kmayer10/ubs-java-app.git
docker container run -d -p 8080:8080 --name tomcat app:1.0
trivy image app:1.0


CONTAINER ORCHESTRATOR: 
-> Docker SWARM -> Only used with Docker (no bueno dependency)
-> AWS ECS -> First Cloud platform -> dependency == only on AWS 
 |
 -> kubernetes -> OSS
 
Google: Borg -> Omega -> Kubernetes -> CNCF: Cloud Native Computing Foundation (OSS) -> have 26 stable projects && 36 incubating projects && 113 sandbox projects

Kubernetes
1. Native - CNCF
2. Enterprise - OpenShift
3. Managed - AWS/AZURE -> give earnings to CNCF to develop more NATIVE

Kubernetes - 3 services under the hood in Native by CNCF && ETCD == CONTROL PLANE == CONTAINER
1. apiServer
2. controller manager
3. scheduler
+ ETCD (also from CNCF)
++ CoreDNS - Resolves Internal Domain Name Server for the functioning of the cluster
++ Kube Proxy - updates firewall and IP table rules
+++ cni-controller - define policies
+++ cni-node - replicate policies

Kubernetes cluster ==> multiple nodes


APISERVER
Communication between control plane and nodes

CONTROLLER MANAGER - creates and deletes resources
-> pods
-> replicasets
-> nodes
-> deploymnet
-> daemonset
-> statefulsets
-> configMaps
-> secrets
-> jobs
-> cronJobs
-> Service
-> EndPoints

SCHEDULER
-> identify best node for pod assignment
-> then container gets created on that node

ETCD 
-> stores the information

kubeadm -> bootstrapping -> kubelet -> CRI (container runtime interface) -> CRI-O



sudo kubeadm init --apiserver-advertise-address `hostname -i | awk '{print $1}'` --pod-network-cidr 10.10.0.0/16 --service-cidr 20.20.0.0/16 --service-dns-domain thinknyx.org
OUTPUT:
[init] Using Kubernetes version: v1.29.2
[preflight] Running pre-flight checks
[preflight] Pulling images required for setting up a Kubernetes cluster
[preflight] This might take a minute or two, depending on the speed of your internet connection
[preflight] You can also perform this action in beforehand using 'kubeadm config images pull'
[certs] Using certificateDir folder "/etc/kubernetes/pki"
[certs] Generating "ca" certificate and key
[certs] Generating "apiserver" certificate and key
[certs] apiserver serving cert is signed for DNS names [kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.thinknyx.org thinknyx-control-plane] and IPs [20.20.0.1 172.31.55.68]
[certs] Generating "apiserver-kubelet-client" certificate and key
[certs] Generating "front-proxy-ca" certificate and key
[certs] Generating "front-proxy-client" certificate and key
[certs] Generating "etcd/ca" certificate and key
[certs] Generating "etcd/server" certificate and key
[certs] etcd/server serving cert is signed for DNS names [localhost thinknyx-control-plane] and IPs [172.31.55.68 127.0.0.1 ::1]
[certs] Generating "etcd/peer" certificate and key
[certs] etcd/peer serving cert is signed for DNS names [localhost thinknyx-control-plane] and IPs [172.31.55.68 127.0.0.1 ::1]
[certs] Generating "etcd/healthcheck-client" certificate and key
[certs] Generating "apiserver-etcd-client" certificate and key
[certs] Generating "sa" key and public key
[kubeconfig] Using kubeconfig folder "/etc/kubernetes"
[kubeconfig] Writing "admin.conf" kubeconfig file
[kubeconfig] Writing "super-admin.conf" kubeconfig file
[kubeconfig] Writing "kubelet.conf" kubeconfig file
[kubeconfig] Writing "controller-manager.conf" kubeconfig file
[kubeconfig] Writing "scheduler.conf" kubeconfig file
[etcd] Creating static Pod manifest for local etcd in "/etc/kubernetes/manifests"
[control-plane] Using manifest folder "/etc/kubernetes/manifests"
[control-plane] Creating static Pod manifest for "kube-apiserver"
[control-plane] Creating static Pod manifest for "kube-controller-manager"
[control-plane] Creating static Pod manifest for "kube-scheduler"
[kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"
[kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"
[kubelet-start] Starting the kubelet
[wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory "/etc/kubernetes/manifests". This can take up to 4m0s
[apiclient] All control plane components are healthy after 5.502036 seconds
[upload-config] Storing the configuration used in ConfigMap "kubeadm-config" in the "kube-system" Namespace
[kubelet] Creating a ConfigMap "kubelet-config" in namespace kube-system with the configuration for the kubelets in the cluster
[upload-certs] Skipping phase. Please see --upload-certs
[mark-control-plane] Marking the node thinknyx-control-plane as control-plane by adding the labels: [node-role.kubernetes.io/control-plane node.kubernetes.io/exclude-from-external-load-balancers]
[mark-control-plane] Marking the node thinknyx-control-plane as control-plane by adding the taints [node-role.kubernetes.io/control-plane:NoSchedule]
[bootstrap-token] Using token: 
[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles
[bootstrap-token] Configured RBAC rules to allow Node Bootstrap tokens to get nodes
[bootstrap-token] Configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials
[bootstrap-token] Configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token
[bootstrap-token] Configured RBAC rules to allow certificate rotation for all node client certificates in the cluster
[bootstrap-token] Creating the "cluster-info" ConfigMap in the "kube-public" namespace
[kubelet-finalize] Updating "/etc/kubernetes/kubelet.conf" to point to a rotatable kubelet client certificate and key
[addons] Applied essential addon: CoreDNS
[addons] Applied essential addon: kube-proxy

Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

Alternatively, if you are the root user, you can run:

  export KUBECONFIG=/etc/kubernetes/admin.conf

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join <ip:port> --token 
        --discovery-token-ca-cert-hash 
		
kubeadm token create

kubectl get nodes

kubectl get nodes -o wide
OUTPUT:
NAME                     STATUS   ROLES           AGE   VERSION   INTERNAL-IP    EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION   CONTAINER-RUNTIME
thinknyx-control-plane   Ready    control-plane   10m   v1.29.2   172.31.55.68   <none>        Ubuntu 22.04.3 LTS   6.2.0-1018-aws   cri-o://1.30.0

kubectl get pods -A
OUTPUT:
kube-system   coredns-76f75df574-4l24c                         0/1     Pending   0          11m
kube-system   coredns-76f75df574-mtkmp                         0/1     Pending   0          11m
kube-system   etcd-thinknyx-control-plane                      1/1     Running   0          11m
kube-system   kube-apiserver-thinknyx-control-plane            1/1     Running   0          11m
kube-system   kube-controller-manager-thinknyx-control-plane   1/1     Running   0          11m
kube-system   kube-proxy-w9c4l                                 1/1     Running   0          11m
kube-system   kube-scheduler-thinknyx-control-plane            1/1     Running   0          11m

To deploy calico network:
curl https://raw.githubusercontent.com/projectcalico/calico/v3.27.2/manifests/calico.yaml -O
kubectl apply -f calico.yaml

command to see what is on a pod ->
kubectl describe pod calico-kube-controllers-68cdf756d9-jd8x9 -n kube-system

df -ah -> shows space available on machine

kubectl run httpd --image kulbhushanmayer/httpd:1.2

kubectl get pods
NAME    READY   STATUS    RESTARTS   AGE
httpd   1/1     Running   0          2m13s

kubectl get pods -o wide 
NAME    READY   STATUS    RESTARTS   AGE     IP             NODE                     NOMINATED NODE   READINESS GATES
httpd   1/1     Running   0          2m43s   10.10.58.196   thinknyx-control-plane   <none>           <none>

SOME grep commands
kubectl get pods -A | grep -i running | wC -1
OUTPUTS the POD NUMBER
10

sudo crictl ps | grep -i httpd
OUTPUT:
4c3db6a3b10fb       docker.io/kulbhushanmayer/httpd     5 minutes ago       Running             httpd                  
   0                   c67b00ba79f45       httpd

TO STOP A RUNNING POD
sudo crictl stop <pod-id>
   86  sudo crictl ps | grep -i httpd
   87  kubectl get pods