
Instead of passing variables, can use ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: db-properties
data:
  PGPORT: "2345"
  PGHOST: postgres.kul.svc.thinknyx.org
  PGUSER: postgres
  PGDATABASE: postgres
  
Then you can refer to them as name: db-properties

To get information in the pod:
kubectl exec psql -- printenv | grep -i PG
-> gets the environment variables starting with PG

kubectl exec psql-setup -- cat database_setup.sh
-> gets the script contents

kubectl exec psql-setup -- cat createTable.sql
-> gets the contents of createTable.sql


-> to add a second port, add it in Service manifest
-> to Deploy 2 pods with the same image, use "Deployment" as kind and add a replicaset
   Deployment is stateful
   
-> To suspend cron job on one minute
kubectl edit cronjobs.batch db-setup
-> scroll down to suspend: false and make suspend: true


-> To expose the node to external traffic through service
see 15_service_for_ext_traffic.yml for two apps

TWO PORTS:

apiVersion: v1
kind: Service
metadata:
  name: postgres
spec:
  selector:
    name: postgres #Label to be available on the POD
  ports:
  - port: 2345 # Service Port
    targetPort: 5432 # POD/Container Port
    name: different-port-for-postgres
  - port: 5432
    targetPort: 5432
    name: postgres-default-port
  type: ClusterIP # External(NodePort) or Internal(ClusterIP)
  




Another way to delete the pods other than kubectl delete pods --all
-> target the pods that are running in a loop by delete -f <name>.yml

EXAMPLE:
kubectl delete -f 16_Deployment_with_CM_initCont.yml  

Daemonset:
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: kul-httpd
spec:
  selector:
    matchLabels:
      app: httpd
  template:
    metadata:
      labels:
        app: httpd
    spec:
      containers:
      - name: httpd
        image: kulbhushanmayer/httpd:1.2
        resources:
          limits:
            memory: "150Mi"
            cpu: "150m"
        ports:
        - containerPort: 80
	
TO RUN:
kubectl apply -f 17_Daemonset.yml

TO CHECK:
kubectl get pods
kubectl get pods -o wide
	
Some Commands for troubleshooting
kubectl describe namespaces kul
  279  kubectl delete pod postgres
  280  kubectl get pods -o wide
  281  kubectl get daemonsets.apps
  282  kubectl describe daemonsets.apps kul-httpd
  283  kubectl rollout restart daemonset kul-httpd
  284  kubectl get pods -o wide
  285  kubectl get nodes
  286  kubectl cordon thinknyx-app-node-alejandro
  287  kubectl get nodes
  288  kubectl rollout restart daemonset kul-httpd
  289  kubectl get pods -o wide
  290  kubectl get daemonsets.apps -A